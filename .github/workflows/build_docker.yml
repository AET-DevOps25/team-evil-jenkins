name: Build Docker Images

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  java-build:
    name: Build Java Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Get project version
        id: get_version
        run: |
          # Run the printVersion task and capture its output.
          # The "tail -n 1" ensures we only get the last line of output.
          VERSION=$(./gradlew printVersion -q | tail -n 1)
          # Set the version as a step output
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Use the version
        run: |
          echo "The extracted version is: ${{ steps.get_version.outputs.version }}"
          echo "We can now build a Docker image with this version."
          # Example: docker build . -t my-repo/service-a:${{ steps.get_version.outputs.version }}

      - name: Build with Gradle
        run: cd server && ./gradlew build

      - name: Upload UserService Artifact
        uses: actions/upload-artifact@v4
        with:
          name: userservice-jar
          path: server/userservice/build/libs/*.jar

      - name: Upload LocationService Artifact
        uses: actions/upload-artifact@v4
        with:
          name: locationservice-jar
          path: server/locationservice/build/libs/*.jar

      # TODO: Upload everything in a matrix   

  publish-docker-images:
    name: Build and publish Docker Images
    needs: java-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service_config:
          - name: client          
            path: ./client
          - name: location-service    
            path: ./server/locationservice
            jar_artifact_name: locationservice-jar
            jar_download_target_dir: server/locationservice/build/libs

          - name: user-service   
            path: ./server/userservice
            context: ./server
            jar_artifact_name: userservice-jar
            jar_download_target_dir: server/userservice/build/libs

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download JAR artifact
        if: matrix.service_config.jar_artifact_name
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service_config.jar_artifact_name }}
          path: ${{ matrix.service_config.jar_download_target_dir }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
    
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service_config.name }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: ./${{ matrix.service_config.path }}
          file: ./${{ matrix.service_config.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}