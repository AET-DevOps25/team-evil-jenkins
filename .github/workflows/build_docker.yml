name: Build Docker Images

on:
  push:
  pull_request:
    branches: [ "main" ]

jobs:
  java-build:
    name: Build ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [userservice, locationservice, matchingservice, messagingservice]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Get Service Version
        id: get_version
        run: |
          SERVICE_VERSION=$(./gradlew :${{ matrix.service }}:printVersion -q)
          echo "Discovered version: $SERVICE_VERSION"
          echo "version=${SERVICE_VERSION}" >> $GITHUB_OUTPUT
          echo "${SERVICE_VERSION}" > version.txt

        working-directory: ./server

      - name: Build with Gradle
        run: ./gradlew :${{ matrix.service }}:build
        working-directory: ./server

      - name: Run Tests with Gradle
        run: ./gradlew :${{ matrix.service }}:test
        working-directory: ./server

      - name: Upload ${{ matrix.service }} Version
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-version
          path: server/version.txt

      - name: Upload ${{ matrix.service }} Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-${{ steps.get_version.outputs.version }}-jar
          path: server/${{ matrix.service }}/build/libs/*.jar

  build-react-frontend:
    name: Build React Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' 
          cache: 'npm'
          cache-dependency-path: ./client/package-lock.json
      - name: Install dependencies
        run: npm ci
        working-directory: ./client

      - name: Build React app
        run: npm run build
        working-directory: ./client

      - name: Cache React build output
        id: cache-react-build
        uses: actions/cache@v4
        with:
          path: ./client/dist
          key: ${{ runner.os }}-react-build-${{ hashFiles('client/src/**', 'client/public/**', 'client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-react-build-

      - name: Upload React Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: react-client-build-artifact
          path: ./client/dist
          retention-days: 1

  publish-docker-images:

    name: Build and publish Docker Images
    needs: [java-build, build-react-frontend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service_config:
          - name: client          
            path: ./client
            is_client: true

          - name: postgres
            path: ./postgres #TODO: how where to store previous contents of the DB ? 

          - name: location-service    
            path: ./server/locationservice
            jar_download_target_dir: server/locationservice/build/libs
            gradle_project_name: locationservice

          - name: user-service   
            path: ./server/userservice
            jar_download_target_dir: server/userservice/build/libs
            gradle_project_name: userservice
          
          - name: matching-service
            path: ./server/matchingservice
            jar_download_target_dir: server/matchingservice/build/libs
            gradle_project_name: matchingservice

          - name: genai
            path: ./genai
            jar_download_target_dir: ""
            gradle_project_name: ""

          - name: messaging-service
            path: ./server/messagingservice
            jar_download_target_dir: server/messagingservice/build/libs
            gradle_project_name: messagingservice

          - name: nginx-gateway
            path: ./nginx
            jar_download_target_dir: ""
            gradle_project_name: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Version artifact
        if: matrix.service_config.gradle_project_name
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service_config.gradle_project_name }}-version
          path: /tmp/version-info

      - name: Read Version from file
        if: matrix.service_config.gradle_project_name
        id: get_version
        run: |
          SERVICE_VERSION=$(cat /tmp/version-info/version.txt)
          echo "Using version from build job: $SERVICE_VERSION"
          echo "version=${SERVICE_VERSION}" >> $GITHUB_OUTPUT

      - name: Download JAR artifact
        if: matrix.service_config.gradle_project_name
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service_config.gradle_project_name }}-${{ steps.get_version.outputs.version }}-jar
          path: ${{ matrix.service_config.jar_download_target_dir }}

      - name: Download React Build Artifact
        if: matrix.service_config.is_client
        uses: actions/download-artifact@v4
        with:
          name: react-client-build-artifact
          path: ./client 

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
    
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service_config.name }}
          tags: |
            # Use Gradle version for Java services, e.g., 0.0.1-SNAPSHOT
            type=raw,value=${{ steps.get_version.outputs.version }},enable=${{ matrix.service_config.gradle_project_name != '' }}
            # Git short commit hash (e.g., a1b2c3d)
            type=sha,format=short
            # Git branch name
            type=ref,event=branch
            # Pull Request number
            type=ref,event=pr
            # latest tag on default branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: ./${{ matrix.service_config.path }}
          file: ./${{ matrix.service_config.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
