# Global values can be defined here

# Namespace configuration
namespace:
  name: team-evil-jenkins 
  create: false 


imagePullPolicy: Always

# Secrets for pulling images from private registries like GHCR
imagePullSecrets:
  - name: ghcr-creds # This should match the name of the secret you create in Kubernetes

# GHCR image registry
ghcr:
  registry: ghcr.io
  organization: aet-devops25 

client:
  replicaCount: 1
  image:
    repository: team-evil-jenkins/client
    tag: latest 
  service:
    type: ClusterIP 
    port: 80 

userService:
  replicaCount: 1
  image:
    repository: team-evil-jenkins/user-service
    tag: latest
  service:
    type: ClusterIP
    port: 8080 # Container port

locationService:
  replicaCount: 1
  image:
    repository: team-evil-jenkins/location-service
    tag: latest
  service:
    type: ClusterIP
    port: 8080 # Container port 

messagingService:
  replicaCount: 1
  image:
    repository: team-evil-jenkins/messaging-service
    tag: latest
  service:
    type: ClusterIP
    port: 8080 # Container port

matchingService:
  replicaCount: 1
  image:
    repository: team-evil-jenkins/matching-service
    tag: latest
  service:
    type: ClusterIP
    port: 8080 # Container port

serviceAccount:
  create: false
  annotations: {}

# Configuration for the Nginx Gateway service
nginxGateway:
  replicaCount: 1
  image:
    repository: team-evil-jenkins/nginx-gateway
    tag: latest
  resources: {}
  auth0:
    domain: "dev-htqjitzqp568np1f.eu.auth0.com"
    audience: "https://dev-htqjitzqp568np1f.eu.auth0.com/api/v2/"
# Configuration for the GenAI service
genai:
  enabled: true
  replicaCount: 1
  image:
    repository: team-evil-jenkins/genai
    tag: latest
  service:
    type: ClusterIP
    port: 80 # Service port
  resources: {}
  env: 
    OPENWEBUI_URL: ""
    OPENWEBUI_API_KEY: ""

# Ingress configuration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  tls:
    - hosts:
        - team-evil-jenkins.student.k8s.aet.cit.tum.de
      secretName: team-evil-jenkins-tls
    - hosts:
        - api.team-evil-jenkins.student.k8s.aet.cit.tum.de
      secretName: team-evil-jenkins-api-tls
  client:
    host: team-evil-jenkins.student.k8s.aet.cit.tum.de
    path: /
    pathType: Prefix
  api:
    host: api.team-evil-jenkins.student.k8s.aet.cit.tum.de
  
  grafana:
    enabled: false

  prometheus:
    enabled: false
 
# monitoring:
#   enabled: true

#   prometheus:
#     image:
#       repository: prom/prometheus
#       tag: v2.52.0
#     service:
#       type: ClusterIP # Only needs to be exposed inside the cluster for Grafana
#       port: 9090
#     config:
#       global:
#         scrape_interval: 15s
#         evaluation_interval: 15s
#       scrape_configs:
#         - job_name: 'prometheus'
#           static_configs:
#             - targets: ['localhost:9090']
#         - job_name: 'user-service'
#           metrics_path: '/api/actuator/prometheus'
#           static_configs:
#             - targets: ['user-service:8080'] # Targets the Kubernetes service
#         - job_name: 'location-service'
#           metrics_path: '/api/actuator/prometheus'
#           static_configs:
#             - targets: ['location-service:8080']
#         - job_name: 'matching-service'
#           metrics_path: '/api/actuator/prometheus'
#           static_configs:
#             - targets: ['matching-service:8080']
#         - job_name: 'messaging-service'
#           metrics_path: '/api/actuator/prometheus'
#           static_configs:
#             - targets: ['messaging-service:8080']

#   grafana:

#     image:
#       repository: grafana/grafana-oss
#       tag: latest
#     service:
#       type: ClusterIP # Exposed via Ingress now
#       port: 3000
#     # For production, use a pre-existing secret
#     adminUser: admin
#     adminPassword: admin

#     provisioning:
#       enabled: true
#       # This will create a configmap for the datasource
#       datasource:
#         name: Prometheus
#         type: prometheus
#         access: proxy
#         url: http://prometheus-service:9090
#         isDefault: true
#       alerts:
#         enabled: true
#         groups:
#           - name: system
#             rules:
#               - alert: HighCPUUsage
#                 expr: 100 - (avg by(instance)(rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
#                 for: 10m
#                 labels:
#                   severity: warning
#                 annotations:
#                   summary: "High CPU usage on {{ $labels.instance }}"
#                   description: "CPU usage is {{ $value }}% for last 10 minutes (threshold: 80%)"
#               - alert: HighMemoryUsage
#                 expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85
#                 for: 15m
#                 labels:
#                   severity: warning
#                 annotations:
#                   summary: "High memory usage on {{ $labels.instance }}"
#                   description: "Memory usage is {{ $value }}% for last 15 minutes (threshold: 85%)"