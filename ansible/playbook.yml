# ansible/playbook.yml
# This playbook deploys the entire application stack using Docker Compose.

---
- hosts: webservers
  become: yes
  tasks:
    - name: "Wait for the server to be ready"
      wait_for_connection:
        timeout: 120
        sleep: 10

    - name: "Install Docker Compose"
      shell: "curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose"
      args:
        # This ensures the command only runs if docker-compose isn't already installed
        creates: /usr/local/bin/docker-compose

    - name: "Create application directory on the server"
      file:
        path: /opt/app
        state: directory
        mode: '0755'

    - name: "Copy docker-compose.yml to the server"
      copy:
        src: ./docker-compose.yml
        dest: /opt/app/docker-compose.yml

    - name: "Copy configuration directories to the server"
      copy:
        src: ../{{ item }}
        dest: /opt/app/
      with_items:
        - nginx
        - prometheus
        - grafana
        - postgres

    # ADDED: This task copies your .env file from the project root to the server.
    # This is required by your docker-compose.yml file.
    - name: "Copy .env file for environment variables"
      copy:
        src: ../.env
        dest: /opt/app/.env

    - name: "Log in to GitHub Container Registry"
      shell: "echo {{ ghcr_pat }} | docker login ghcr.io -u {{ ghcr_username }} --password-stdin"
      no_log: true # Important: This prevents your token from appearing in logs

    - name: "Deploy application stack with Docker Compose"
      # Using the full path to the docker-compose executable to avoid PATH issues.
      shell: |
        cd /opt/app
        # Step 1: Pull the latest images from the registry to ensure we have the newest versions
        /usr/local/bin/docker-compose pull
        # Step 2: Start all services defined in docker-compose.yml in detached mode.
        # --force-recreate ensures that containers are updated if their image has changed.
        /usr/local/bin/docker-compose up -d --force-recreate
