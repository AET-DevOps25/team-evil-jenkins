# ansible/docker-compose.yml
# This file is adapted for deployment on the EC2 instance.
# It uses pre-built images from a container registry and secures networking.

version: '3.8'

services:
  # --- Public-Facing Entry Point ---
  nginx:
    image: nginx:latest
    container_name: api-gateway
    ports:
      - "80:80"
    environment:
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/oidc.lua:/etc/nginx/oidc.lua:ro
    depends_on:
      - user-service
      - location-service
      - messaging-service
      - matching-service
      - client
    restart: always

  # --- Internal Backend Services (Not Exposed to the Internet) ---
  user-service:
    image: ghcr.io/your-github-username/user-service:latest
    environment:
      SPRING_PROFILES_ACTIVE: production
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user_service_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: your_secure_password
    depends_on:
      - postgres
    restart: always

  location-service:
    image: ghcr.io/your-github-username/location-service:latest
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/location_service_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: your_secure_password
    depends_on:
      - postgres
    restart: always

  messaging-service:
    image: ghcr.io/your-github-username/messaging-service:latest
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/messaging_service_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: your_secure_password
    depends_on:
      - postgres
    restart: always

  matching-service:
    image: ghcr.io/your-github-username/matching-service:latest
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/matching_service_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: your_secure_password
    depends_on:
      - postgres
    restart: always

  client:
    image: ghcr.io/your-github-username/client:latest
    environment:
      VITE_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      VITE_AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      VITE_AUTH0_CLIENT_ID: ${VITE_AUTH0_CLIENT_ID}
    restart: always

  genai:
    image: ghcr.io/your-github-username/genai:latest
    environment:
      OPENWEBUI_URL: ${OPENWEBUI_URL}
      OPENWEBUI_API_KEY: ${OPENWEBUI_API_KEY}
    depends_on:
      - matching-service
    restart: always

  # --- Database Service (Internal Only) ---
  postgres:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: your_secure_password
    restart: always

  # --- Optional Admin & Monitoring Tools (Exposed for your access) ---
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    depends_on:
      - postgres
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    depends_on:
      - user-service

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus
    restart: unless-stopped

# --- Data Persistence Volumes ---
volumes:
  postgres_data:
  prometheus_data:
  grafana-storage:
