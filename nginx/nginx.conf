worker_processes  1;

env AUTH0_DOMAIN;
env AUTH0_AUDIENCE;

events {
    worker_connections  1024;
}

http {
    # Log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log warn;

    # Lua shared dictionaries for OpenID Connect (JWKS & discovery cache)
    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;
    lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;
    lua_ssl_verify_depth 5;
    resolver 8.8.8.8 8.8.4.4 valid=30s ipv6=off;

    # Simple upstreams for each microservice
    upstream user_service {
        server user-service:8080;
    }
    upstream location_service {
        server location-service:8080;
    }
    upstream messaging_service {
        server messaging-service:8080;
    }
    upstream matching_service {
        server matching-service:8080;
    }

    server {
        listen 80;

        # Health check
        location /healthz {
            return 200 'API Gateway OK';
            add_header Content-Type text/plain;
        }

        # Route requests by path prefix

        # exact path without trailing slash to avoid pre-flight redirect issues
        location = /user {
            # Handle CORS pre-flight
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Max-Age' 86400;
                return 204;
            }

            # Validate JWT for real requests
            access_by_lua_file /etc/nginx/oidc.lua;

            # CORS headers for real responses
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

            proxy_set_header Host $host;
            proxy_pass http://user_service$request_uri;
        }

        # --- exact /location path without trailing slash ---
        location = /location {
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Max-Age' 86400;
                return 204;
            }

            access_by_lua_file /etc/nginx/oidc.lua;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

            proxy_set_header Host $host;
            proxy_pass http://location_service$request_uri;
        }

        # prefix /location/ for update and other sub-paths
        location /location/ {
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Max-Age' 86400;
                return 204;
            }

            access_by_lua_file /etc/nginx/oidc.lua;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

      
            proxy_set_header Host $host;
            proxy_pass http://location_service$request_uri;
        }

        location /user/ {
    # Handle CORS pre-flight requests early
    if ($request_method = OPTIONS) {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
        add_header 'Access-Control-Max-Age' 86400;
        return 204;
    }

    # For actual requests validate JWT
    access_by_lua_file /etc/nginx/oidc.lua;

    # CORS headers for actual responses
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

    proxy_set_header Host $host;
    proxy_pass http://user_service$request_uri;
}
        location /genai/ {
            access_by_lua_file /etc/nginx/oidc.lua;
            proxy_set_header Host $host;
            proxy_pass http://genai$request_uri;
        }

        location /matching/ {
            # Handle CORS pre-flight requests early
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Max-Age' 86400;
                return 204;
            }

            # Validate JWT for actual requests
            access_by_lua_file /etc/nginx/oidc.lua;

            # CORS headers for actual responses
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

            proxy_set_header Host $host;
            proxy_pass http://matching_service$request_uri;
        }

        location /messaging/ {
            # Handle CORS pre-flight requests early
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
                add_header 'Access-Control-Max-Age' 86400;
                return 204;
            }

            # Validate JWT for actual requests
            access_by_lua_file /etc/nginx/oidc.lua;

            # CORS headers for actual responses
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

            proxy_set_header Host $host;
            proxy_pass http://messaging_service$request_uri;
        }

        # WebSocket endpoint for real-time messaging
        location /ws {
            # WebSocket connections handle CORS at application level
            # Skip nginx CORS to avoid duplication with backend CORS

            # WebSocket proxy settings
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            
            proxy_pass http://messaging_service/ws;
        }

        # Fallback
        location / {
            return 404;
        }
    }
}
